// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: store.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createStore = `-- name: CreateStore :one
INSERT INTO stores (
  name, thumbnail, user_id
) VALUES (
  $1, $2, $3
) RETURNING id, name, thumbnail, user_id, created_at, updated_at, deleted_at
`

type CreateStoreParams struct {
	Name      string    `json:"name"`
	Thumbnail string    `json:"thumbnail"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, createStore, arg.Name, arg.Thumbnail, arg.UserID)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Thumbnail,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getStoresBelongingToUser = `-- name: GetStoresBelongingToUser :many
SELECT id, name, thumbnail FROM stores
WHERE user_id = $1 AND deleted_at IS NULL
`

type GetStoresBelongingToUserRow struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Thumbnail string    `json:"thumbnail"`
}

func (q *Queries) GetStoresBelongingToUser(ctx context.Context, userID uuid.UUID) ([]GetStoresBelongingToUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getStoresBelongingToUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStoresBelongingToUserRow{}
	for rows.Next() {
		var i GetStoresBelongingToUserRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Thumbnail); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
