// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: order.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getOrderById = `-- name: GetOrderById :one
SELECT id, volume, to_be_paid, customer_id, product_id, created_at, updated_at FROM orders
WHERE id = $1
`

type GetOrderByIdRow struct {
	ID         uuid.UUID `json:"id"`
	Volume     int32     `json:"volume"`
	ToBePaid   int32     `json:"to_be_paid"`
	CustomerID uuid.UUID `json:"customer_id"`
	ProductID  uuid.UUID `json:"product_id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) GetOrderById(ctx context.Context, id uuid.UUID) (GetOrderByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, id)
	var i GetOrderByIdRow
	err := row.Scan(
		&i.ID,
		&i.Volume,
		&i.ToBePaid,
		&i.CustomerID,
		&i.ProductID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrdersBelongingToStore = `-- name: GetOrdersBelongingToStore :many
SELECT id, volume, to_be_paid, customer_id, product_id, created_at, updated_at FROM orders
WHERE store_id = $1
`

type GetOrdersBelongingToStoreRow struct {
	ID         uuid.UUID `json:"id"`
	Volume     int32     `json:"volume"`
	ToBePaid   int32     `json:"to_be_paid"`
	CustomerID uuid.UUID `json:"customer_id"`
	ProductID  uuid.UUID `json:"product_id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) GetOrdersBelongingToStore(ctx context.Context, storeID uuid.UUID) ([]GetOrdersBelongingToStoreRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersBelongingToStore, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrdersBelongingToStoreRow{}
	for rows.Next() {
		var i GetOrdersBelongingToStoreRow
		if err := rows.Scan(
			&i.ID,
			&i.Volume,
			&i.ToBePaid,
			&i.CustomerID,
			&i.ProductID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
