// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: product.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createStoreProduct = `-- name: CreateStoreProduct :one
INSERT INTO products (
  name, image, volume, unit, price_per_unit, store_id
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, image, volume, unit, price_per_unit, store_id, created_at, updated_at
`

type CreateStoreProductParams struct {
	Name         string    `json:"name"`
	Image        string    `json:"image"`
	Volume       int32     `json:"volume"`
	Unit         string    `json:"unit"`
	PricePerUnit int32     `json:"price_per_unit"`
	StoreID      uuid.UUID `json:"store_id"`
}

func (q *Queries) CreateStoreProduct(ctx context.Context, arg CreateStoreProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createStoreProduct,
		arg.Name,
		arg.Image,
		arg.Volume,
		arg.Unit,
		arg.PricePerUnit,
		arg.StoreID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Volume,
		&i.Unit,
		&i.PricePerUnit,
		&i.StoreID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, image, volume, unit, price_per_unit, created_at, updated_at FROM products
WHERE id = $1
`

type GetProductByIDRow struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Image        string    `json:"image"`
	Volume       int32     `json:"volume"`
	Unit         string    `json:"unit"`
	PricePerUnit int32     `json:"price_per_unit"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (GetProductByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i GetProductByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Volume,
		&i.Unit,
		&i.PricePerUnit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductsBelongingToStore = `-- name: GetProductsBelongingToStore :many
SELECT id, name, image, volume, unit, price_per_unit, created_at, updated_at FROM products
WHERE store_id = $1
`

type GetProductsBelongingToStoreRow struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Image        string    `json:"image"`
	Volume       int32     `json:"volume"`
	Unit         string    `json:"unit"`
	PricePerUnit int32     `json:"price_per_unit"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) GetProductsBelongingToStore(ctx context.Context, storeID uuid.UUID) ([]GetProductsBelongingToStoreRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductsBelongingToStore, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductsBelongingToStoreRow{}
	for rows.Next() {
		var i GetProductsBelongingToStoreRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.Volume,
			&i.Unit,
			&i.PricePerUnit,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
