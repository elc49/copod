// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: payment.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getPaymentsBelongingToFarm = `-- name: GetPaymentsBelongingToFarm :many
SELECT id, customer, amount, status, created_at, updated_at FROM payments
WHERE farm_id = $1
`

type GetPaymentsBelongingToFarmRow struct {
	ID        uuid.UUID `json:"id"`
	Customer  string    `json:"customer"`
	Amount    int32     `json:"amount"`
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetPaymentsBelongingToFarm(ctx context.Context, farmID uuid.UUID) ([]GetPaymentsBelongingToFarmRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentsBelongingToFarm, farmID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPaymentsBelongingToFarmRow{}
	for rows.Next() {
		var i GetPaymentsBelongingToFarmRow
		if err := rows.Scan(
			&i.ID,
			&i.Customer,
			&i.Amount,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
