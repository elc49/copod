// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: payment.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const buyRights = `-- name: BuyRights :one
INSERT INTO payments (
  customer, amount, currency, reason, status, reference_id, user_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, customer, amount, currency, reason, status, reference_id, user_id, order_id, market_id, farm_id, created_at, updated_at
`

type BuyRightsParams struct {
	Customer    string         `json:"customer"`
	Amount      int32          `json:"amount"`
	Currency    string         `json:"currency"`
	Reason      string         `json:"reason"`
	Status      string         `json:"status"`
	ReferenceID sql.NullString `json:"reference_id"`
	UserID      uuid.UUID      `json:"user_id"`
}

func (q *Queries) BuyRights(ctx context.Context, arg BuyRightsParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, buyRights,
		arg.Customer,
		arg.Amount,
		arg.Currency,
		arg.Reason,
		arg.Status,
		arg.ReferenceID,
		arg.UserID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Customer,
		&i.Amount,
		&i.Currency,
		&i.Reason,
		&i.Status,
		&i.ReferenceID,
		&i.UserID,
		&i.OrderID,
		&i.MarketID,
		&i.FarmID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentsBelongingToFarm = `-- name: GetPaymentsBelongingToFarm :many
SELECT id, customer, amount, currency, status, created_at, updated_at FROM payments
WHERE farm_id = $1
`

type GetPaymentsBelongingToFarmRow struct {
	ID        uuid.UUID `json:"id"`
	Customer  string    `json:"customer"`
	Amount    int32     `json:"amount"`
	Currency  string    `json:"currency"`
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetPaymentsBelongingToFarm(ctx context.Context, farmID uuid.NullUUID) ([]GetPaymentsBelongingToFarmRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentsBelongingToFarm, farmID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPaymentsBelongingToFarmRow{}
	for rows.Next() {
		var i GetPaymentsBelongingToFarmRow
		if err := rows.Scan(
			&i.ID,
			&i.Customer,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRightPurchasePaymentByReferenceID = `-- name: GetRightPurchasePaymentByReferenceID :one
SELECT id, customer, amount, currency, reason, status, reference_id, user_id, order_id, market_id, farm_id, created_at, updated_at FROM payments
WHERE reference_id = $1
LIMIT 1
`

func (q *Queries) GetRightPurchasePaymentByReferenceID(ctx context.Context, referenceID sql.NullString) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getRightPurchasePaymentByReferenceID, referenceID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Customer,
		&i.Amount,
		&i.Currency,
		&i.Reason,
		&i.Status,
		&i.ReferenceID,
		&i.UserID,
		&i.OrderID,
		&i.MarketID,
		&i.FarmID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePaystackPaymentStatus = `-- name: UpdatePaystackPaymentStatus :one
UPDATE payments SET status = $1
WHERE reference_id = $2
RETURNING id, customer, amount, currency, reason, status, reference_id, user_id, order_id, market_id, farm_id, created_at, updated_at
`

type UpdatePaystackPaymentStatusParams struct {
	Status      string         `json:"status"`
	ReferenceID sql.NullString `json:"reference_id"`
}

func (q *Queries) UpdatePaystackPaymentStatus(ctx context.Context, arg UpdatePaystackPaymentStatusParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePaystackPaymentStatus, arg.Status, arg.ReferenceID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Customer,
		&i.Amount,
		&i.Currency,
		&i.Reason,
		&i.Status,
		&i.ReferenceID,
		&i.UserID,
		&i.OrderID,
		&i.MarketID,
		&i.FarmID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
