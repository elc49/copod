# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time
scalar UUID

# PaymentStatus
enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

# Post
type Post {
  id: UUID!
  text: String!
  image: String!
  tags: [String!]!
  userId: UUID!
  user: User!
  created_at: Time!
  updated_at: Time!
}

# User
type User {
  id: UUID!
  phone: String!
  avatar: String!
  username: String!
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
}

# Store
type Store {
  id: UUID!
  name: String!
  thumbnail: String!
  userId: UUID!
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
}

# Product
type Product {
  id: UUID!
  name: String!
  image: String!
  volume: Int!
  unit: String!
  pricePerUnit: Int!
  created_at: Time!
  updated_at: Time!
}

# Order
type Order {
  id: UUID!
  volume: Int!
  toBePaid: Int!
  customerId: UUID!
  productId: UUID!
  product: Product!
  customer: User!
  created_at: Time!
  updated_at: Time!
}

# Payment
type Payment {
  id: UUID!
  customer: String!
  amount: Int!
  reason: String!
  status: PaymentStatus!
  orderId: UUID!
  created_at: Time!
  updated_at: Time!
}

input GpsInput {
  lat: Float!
  lng: Float!
}

input NewPostInput {
  text: String!
  image: String!
  tags: [String!]!
  userId: UUID!
  location: GpsInput!
}

input NewStoreInput {
  name: String!
  thumbnail: String!
}

input NewStoreProductInput {
  storeId: UUID!
  name: String!
  image: String!
  volume: Int!
  unit: String!
  pricePerUnit: Int!
}

type Query {
  timeline: [Post!]!
  getStoresBelongingToUser: [Store!]!
  getUser: User!
  getStoreById(id: UUID!): Store!
  getStoreProducts(id: UUID!): [Product!]!
  getStoreOrders(id: UUID!): [Order!]!
  getStorePayments(id: UUID!): [Payment!]!
}

type Mutation {
  createPost(input: NewPostInput!): Post!
  createStore(input: NewStoreInput!): Store!
  createStoreProduct(input: NewStoreProductInput!): Product!
}
