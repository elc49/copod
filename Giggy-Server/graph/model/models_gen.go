// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type GpsInput struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

type Mutation struct {
}

type NewPostInput struct {
	Text     string    `json:"text"`
	Image    string    `json:"image"`
	Tags     []string  `json:"tags"`
	UserID   uuid.UUID `json:"userId"`
	Location *GpsInput `json:"location"`
}

type NewStoreInput struct {
	Name      string `json:"name"`
	Thumbnail string `json:"thumbnail"`
}

type Order struct {
	ID         uuid.UUID `json:"id"`
	Volume     int       `json:"volume"`
	ToBePaid   int       `json:"toBePaid"`
	CustomerID uuid.UUID `json:"customerId"`
	ProductID  uuid.UUID `json:"productId"`
	Product    *Product  `json:"product"`
	Customer   *User     `json:"customer"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

type Payment struct {
	ID        uuid.UUID     `json:"id"`
	Customer  string        `json:"customer"`
	Amount    int           `json:"amount"`
	Reason    string        `json:"reason"`
	Status    PaymentStatus `json:"status"`
	OrderID   uuid.UUID     `json:"orderId"`
	CreatedAt time.Time     `json:"created_at"`
	UpdatedAt time.Time     `json:"updated_at"`
}

type Post struct {
	ID        uuid.UUID `json:"id"`
	Text      string    `json:"text"`
	Image     string    `json:"image"`
	Tags      []string  `json:"tags"`
	UserID    uuid.UUID `json:"userId"`
	User      *User     `json:"user"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Product struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Image        string    `json:"image"`
	Volume       int       `json:"volume"`
	Unit         string    `json:"unit"`
	PricePerUnit int       `json:"pricePerUnit"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

type Query struct {
}

type Store struct {
	ID        uuid.UUID  `json:"id"`
	Name      string     `json:"name"`
	Thumbnail string     `json:"thumbnail"`
	UserID    uuid.UUID  `json:"userId"`
	CreatedAt time.Time  `json:"created_at"`
	UpdatedAt time.Time  `json:"updated_at"`
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

type PaymentStatus string

const (
	PaymentStatusPaid    PaymentStatus = "PAID"
	PaymentStatusPending PaymentStatus = "PENDING"
	PaymentStatusFailed  PaymentStatus = "FAILED"
)

var AllPaymentStatus = []PaymentStatus{
	PaymentStatusPaid,
	PaymentStatusPending,
	PaymentStatusFailed,
}

func (e PaymentStatus) IsValid() bool {
	switch e {
	case PaymentStatusPaid, PaymentStatusPending, PaymentStatusFailed:
		return true
	}
	return false
}

func (e PaymentStatus) String() string {
	return string(e)
}

func (e *PaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentStatus", str)
	}
	return nil
}

func (e PaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
