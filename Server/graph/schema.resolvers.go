package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	"github.com/elc49/vuno/Server/src/graph"
	"github.com/elc49/vuno/Server/src/graph/model"
	"github.com/google/uuid"
)

// Farm is the resolver for the farm field.
func (r *cartResolver) Farm(ctx context.Context, obj *model.Cart) (*model.Farm, error) {
	panic(fmt.Errorf("not implemented: Farm - farm"))
}

// Market is the resolver for the market field.
func (r *cartResolver) Market(ctx context.Context, obj *model.Cart) (*model.Market, error) {
	panic(fmt.Errorf("not implemented: Market - market"))
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPostInput) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: CreatePost - createPost"))
}

// CreateFarm is the resolver for the createFarm field.
func (r *mutationResolver) CreateFarm(ctx context.Context, input model.NewFarmInput) (*model.Farm, error) {
	panic(fmt.Errorf("not implemented: CreateFarm - createFarm"))
}

// CreateFarmMarket is the resolver for the createFarmMarket field.
func (r *mutationResolver) CreateFarmMarket(ctx context.Context, input model.NewFarmMarketInput) (*model.Market, error) {
	panic(fmt.Errorf("not implemented: CreateFarmMarket - createFarmMarket"))
}

// PayWithMpesa is the resolver for the payWithMpesa field.
func (r *mutationResolver) PayWithMpesa(ctx context.Context, input model.PayWithMpesaInput) (*model.PayWithMpesa, error) {
	panic(fmt.Errorf("not implemented: PayWithMpesa - payWithMpesa"))
}

// AddToCart is the resolver for the addToCart field.
func (r *mutationResolver) AddToCart(ctx context.Context, input model.AddToCartInput) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: AddToCart - addToCart"))
}

// DeleteCartItem is the resolver for the deleteCartItem field.
func (r *mutationResolver) DeleteCartItem(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCartItem - deleteCartItem"))
}

// SendOrderToFarm is the resolver for the sendOrderToFarm field.
func (r *mutationResolver) SendOrderToFarm(ctx context.Context, input []*model.SendOrderToFarmInput) (bool, error) {
	panic(fmt.Errorf("not implemented: SendOrderToFarm - sendOrderToFarm"))
}

// UpdateOrderStatus is the resolver for the updateOrderStatus field.
func (r *mutationResolver) UpdateOrderStatus(ctx context.Context, input model.UpdateOrderStatusInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: UpdateOrderStatus - updateOrderStatus"))
}

// Market is the resolver for the market field.
func (r *orderResolver) Market(ctx context.Context, obj *model.Order) (*model.Market, error) {
	panic(fmt.Errorf("not implemented: Market - market"))
}

// Customer is the resolver for the customer field.
func (r *orderResolver) Customer(ctx context.Context, obj *model.Order) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Customer - customer"))
}

// User is the resolver for the user field.
func (r *postResolver) User(ctx context.Context, obj *model.Post) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// GetLocalizedPosters is the resolver for the getLocalizedPosters field.
func (r *queryResolver) GetLocalizedPosters(ctx context.Context, radius model.GpsInput) ([]*model.Post, error) {
	panic(fmt.Errorf("not implemented: GetLocalizedPosters - getLocalizedPosters"))
}

// GetFarmsBelongingToUser is the resolver for the getFarmsBelongingToUser field.
func (r *queryResolver) GetFarmsBelongingToUser(ctx context.Context) ([]*model.Farm, error) {
	panic(fmt.Errorf("not implemented: GetFarmsBelongingToUser - getFarmsBelongingToUser"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: GetUser - getUser"))
}

// GetLocalizedMarkets is the resolver for the getLocalizedMarkets field.
func (r *queryResolver) GetLocalizedMarkets(ctx context.Context, radius model.GpsInput) ([]*model.Market, error) {
	panic(fmt.Errorf("not implemented: GetLocalizedMarkets - getLocalizedMarkets"))
}

// GetFarmByID is the resolver for the getFarmById field.
func (r *queryResolver) GetFarmByID(ctx context.Context, id uuid.UUID) (*model.Farm, error) {
	panic(fmt.Errorf("not implemented: GetFarmByID - getFarmById"))
}

// GetFarmMarkets is the resolver for the getFarmMarkets field.
func (r *queryResolver) GetFarmMarkets(ctx context.Context, id uuid.UUID) ([]*model.Market, error) {
	panic(fmt.Errorf("not implemented: GetFarmMarkets - getFarmMarkets"))
}

// GetFarmOrders is the resolver for the getFarmOrders field.
func (r *queryResolver) GetFarmOrders(ctx context.Context, id uuid.UUID) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: GetFarmOrders - getFarmOrders"))
}

// GetFarmPayments is the resolver for the getFarmPayments field.
func (r *queryResolver) GetFarmPayments(ctx context.Context, id uuid.UUID) ([]*model.Payment, error) {
	panic(fmt.Errorf("not implemented: GetFarmPayments - getFarmPayments"))
}

// GetPaystackPaymentVerification is the resolver for the getPaystackPaymentVerification field.
func (r *queryResolver) GetPaystackPaymentVerification(ctx context.Context, referenceID string) (*model.PaystackPaymentUpdate, error) {
	panic(fmt.Errorf("not implemented: GetPaystackPaymentVerification - getPaystackPaymentVerification"))
}

// GetUserCartItems is the resolver for the getUserCartItems field.
func (r *queryResolver) GetUserCartItems(ctx context.Context) ([]*model.Cart, error) {
	panic(fmt.Errorf("not implemented: GetUserCartItems - getUserCartItems"))
}

// GetOrdersBelongingToUser is the resolver for the getOrdersBelongingToUser field.
func (r *queryResolver) GetOrdersBelongingToUser(ctx context.Context) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: GetOrdersBelongingToUser - getOrdersBelongingToUser"))
}

// GetUserOrdersCount is the resolver for the getUserOrdersCount field.
func (r *queryResolver) GetUserOrdersCount(ctx context.Context) (int, error) {
	panic(fmt.Errorf("not implemented: GetUserOrdersCount - getUserOrdersCount"))
}

// PaymentUpdate is the resolver for the paymentUpdate field.
func (r *subscriptionResolver) PaymentUpdate(ctx context.Context, userID uuid.UUID) (<-chan *model.PaystackPaymentUpdate, error) {
	panic(fmt.Errorf("not implemented: PaymentUpdate - paymentUpdate"))
}

// Cart returns graph.CartResolver implementation.
func (r *Resolver) Cart() graph.CartResolver { return &cartResolver{r} }

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Order returns graph.OrderResolver implementation.
func (r *Resolver) Order() graph.OrderResolver { return &orderResolver{r} }

// Post returns graph.PostResolver implementation.
func (r *Resolver) Post() graph.PostResolver { return &postResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// Subscription returns graph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type cartResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type orderResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
