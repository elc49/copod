# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time
scalar UUID

# OrderStatus
enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

# MarketStatus
enum MarketStatus {
  OPEN
  CLOSED
  BOOKED
}

# MarketType
enum MarketType {
  SEEDS
  SEEDLINGS
  MACHINERY
  HARVEST
}

# MetricUnits
enum MetricUnit {
  Kg
  Gram
  Litre
  Hour
  Piece
}

# Address
type Address {
  addressString: String!
  coords: Gps!
}

# Gps
type Gps {
  lat: Float!
  lng: Float!
}

# User
type User {
  id: UUID!
  phone: String!
  avatar: String!
  username: String!
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
}

# Farm
type Farm {
  id: UUID!
  name: String!
  thumbnail: String!
  about: String
  dateStarted: Time!
  userId: UUID!
  rating: Float!
  reviewers: Int!
  completed_orders: Int!
  address_string: String!
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
}

# Market
type Market {
  id: UUID!
  name: String!
  image: String!
  volume: Int!
  details: String!
  running_volume: Int!
  unit: MetricUnit!
  type: MarketType!
  status: MarketStatus!
  farm: Farm!
  farmId: UUID!
  canOrder: Boolean!
  pricePerUnit: Int!
  created_at: Time!
  updated_at: Time!
}

# Order
type Order {
  id: UUID!
  toBePaid: Int!
  currency: String!
  customerId: UUID!
  short_id: String!
  farmId: UUID!
  status: OrderStatus!
  customer: User!
  items: [OrderItem!]!
  created_at: Time!
  updated_at: Time!
}

# OrderItem
type OrderItem {
  id: UUID!
  volume: Int!
  market_id: UUID!
  market: Market!
  created_at: Time!
  updated_at: Time!
}

# Payment
type Payment {
  id: UUID!
  customer: String!
  amount: Int!
  reason: String!
  status: String!
  orderId: UUID!
  created_at: Time!
  updated_at: Time!
}

# PayWithMpesa
type PayWithMpesa {
  referenceId: String!
}

# PaystackPaymentUpdate
type PaystackPaymentUpdate {
  referenceId: String!
  status: String!
  sessionId: UUID!
}

# Cart
type Cart {
  id: UUID!
  volume: Int!
  farm_id: UUID!
  farm: Farm!
  market_id: UUID!
  market: Market!
  user_id: UUID!
  created_at: Time!
  updated_at: Time!
}

input GpsInput {
  lat: Float!
  lng: Float!
}

input NewPostInput {
  text: String!
  image: String!
  tags: [String!]!
  userId: UUID!
  location: GpsInput!
}

input NewFarmInput {
  name: String!
  about: String!
  location: GpsInput!
  dateStarted: String!
  thumbnail: String!
}

input NewFarmMarketInput {
  farmId: UUID!
  product: String!
  details: String!
  image: String!
  volume: Int!
  type: MarketType!
  location: GpsInput!
  unit: MetricUnit!
  pricePerUnit: Int!
}

input PayWithMpesaInput {
  amount: Int!
  currency: String!
  phone: String!
  reason: String!
}

input AddToCartInput {
  volume: Int!
  marketId: UUID!
  farmId: UUID!
}

input OrderItemInput {
  cartId: UUID!
  farmId: UUID!
  volume: Int!
  marketId: UUID!
}

input SendOrderToFarmInput {
  toBePaid: Int!
  currency: String!
  order_items: [OrderItemInput!]!
}

input UpdateOrderStatusInput {
  id: UUID!
  status: OrderStatus!
}

input SetMarketStatusInput {
  id: UUID!
  status: MarketStatus!
}

input UpdateFarmDetailsInput {
  id: UUID!
  about: String!
  thumbnail: String!
}

input GetLocalizedMarketsInput {
  radius: GpsInput!
  market: MarketType!
}

input GetFarmMarketsInput {
  farmId: UUID!
  market: MarketType!
}

input GetLocalizedMachineryMarketsInput {
  radius: GpsInput!
}

input InitializePaystackTransactionInput {
  amount: Int!
}

type Query {
  getFarmsBelongingToUser: [Farm!]!
  getUser: User!
  getLocalizedMarkets(input: GetLocalizedMarketsInput!): [Market!]!
  getFarmById(id: UUID!): Farm!
  getFarmMarkets(input: GetFarmMarketsInput!): [Market!]!
  getFarmOrders(id: UUID!): [Order!]!
  getFarmPayments(id: UUID!): [Payment!]!
  getPaystackPaymentVerification(referenceId: String!): PaystackPaymentUpdate!
  getUserCartItems: [Cart!]!
  getOrdersBelongingToUser: [Order!]!
  getUserOrdersCount: Int!
  getMarketDetails(id: UUID!): Market!
  getLocalizedMachineryMarkets(input: GetLocalizedMachineryMarketsInput!): [Market!]!
  getOrderDetails(id: UUID!): Order!
}

type Mutation {
  createFarm(input: NewFarmInput!): Farm!
  createFarmMarket(input: NewFarmMarketInput!): Market!
  payWithMpesa(input: PayWithMpesaInput!): PayWithMpesa!
  addToCart(input: AddToCartInput!): Cart!
  deleteCartItem(id: UUID!): Boolean!
  sendOrderToFarm(input: SendOrderToFarmInput!): Order!
  updateOrderStatus(input: UpdateOrderStatusInput!): Order!
  setMarketStatus(input: SetMarketStatusInput!): Market!
  updateFarmDetails(input: UpdateFarmDetailsInput!): Farm!
  initializePaystackTransaction(input: InitializePaystackTransactionInput!): String!
}

type Subscription {
  paymentUpdate(userId: UUID!): PaystackPaymentUpdate!
}
