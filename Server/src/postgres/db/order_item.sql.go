// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: order_item.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countOrderItems = `-- name: CountOrderItems :one
SELECT COUNT(*) FROM order_items
WHERE order_id = $1
`

func (q *Queries) CountOrderItems(ctx context.Context, orderID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countOrderItems, orderID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
  volume, market_id, order_id
) VALUES (
  $1, $2, $3
)
RETURNING id, volume, market_id, order_id, created_at, updated_at
`

type CreateOrderItemParams struct {
	Volume   int32     `json:"volume"`
	MarketID uuid.UUID `json:"market_id"`
	OrderID  uuid.UUID `json:"order_id"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem, arg.Volume, arg.MarketID, arg.OrderID)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.Volume,
		&i.MarketID,
		&i.OrderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT id, volume, market_id, order_id, created_at, updated_at FROM order_items
WHERE order_id = $1
`

func (q *Queries) GetOrderItems(ctx context.Context, orderID uuid.UUID) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.Volume,
			&i.MarketID,
			&i.OrderID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
