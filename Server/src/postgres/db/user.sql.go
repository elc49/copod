// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const clearTestUsers = `-- name: ClearTestUsers :exec
DELETE FROM users
`

func (q *Queries) ClearTestUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearTestUsers)
	return err
}

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUserByPhone = `-- name: CreateUserByPhone :one
INSERT INTO users (
  phone, username, avatar
) VALUES (
  $1, $2, $3
) RETURNING id, phone, username, avatar, has_farming_rights, has_poster_rights, created_at, updated_at, deleted_at
`

type CreateUserByPhoneParams struct {
	Phone    string         `json:"phone"`
	Username sql.NullString `json:"username"`
	Avatar   string         `json:"avatar"`
}

func (q *Queries) CreateUserByPhone(ctx context.Context, arg CreateUserByPhoneParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUserByPhone, arg.Phone, arg.Username, arg.Avatar)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Username,
		&i.Avatar,
		&i.HasFarmingRights,
		&i.HasPosterRights,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, phone, username, avatar, has_farming_rights, has_poster_rights, created_at, updated_at FROM users
WHERE id = $1 AND deleted_at IS NULL
`

type GetUserByIDRow struct {
	ID               uuid.UUID      `json:"id"`
	Phone            string         `json:"phone"`
	Username         sql.NullString `json:"username"`
	Avatar           string         `json:"avatar"`
	HasFarmingRights bool           `json:"has_farming_rights"`
	HasPosterRights  bool           `json:"has_poster_rights"`
	CreatedAt        time.Time      `json:"created_at"`
	UpdatedAt        time.Time      `json:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Username,
		&i.Avatar,
		&i.HasFarmingRights,
		&i.HasPosterRights,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, phone, has_farming_rights, has_poster_rights, created_at, updated_at FROM users
WHERE phone = $1 AND deleted_at IS NULL
`

type GetUserByPhoneRow struct {
	ID               uuid.UUID `json:"id"`
	Phone            string    `json:"phone"`
	HasFarmingRights bool      `json:"has_farming_rights"`
	HasPosterRights  bool      `json:"has_poster_rights"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
}

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (GetUserByPhoneRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i GetUserByPhoneRow
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.HasFarmingRights,
		&i.HasPosterRights,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setUserFarmingRights = `-- name: SetUserFarmingRights :one
UPDATE users SET has_farming_rights = $1
WHERE id = $2
RETURNING id, phone, username, avatar, has_farming_rights, has_poster_rights, created_at, updated_at, deleted_at
`

type SetUserFarmingRightsParams struct {
	HasFarmingRights bool      `json:"has_farming_rights"`
	ID               uuid.UUID `json:"id"`
}

func (q *Queries) SetUserFarmingRights(ctx context.Context, arg SetUserFarmingRightsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setUserFarmingRights, arg.HasFarmingRights, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Username,
		&i.Avatar,
		&i.HasFarmingRights,
		&i.HasPosterRights,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const setUserPosterRights = `-- name: SetUserPosterRights :one
UPDATE users SET has_poster_rights = $1
WHERE id = $2
RETURNING id, phone, username, avatar, has_farming_rights, has_poster_rights, created_at, updated_at, deleted_at
`

type SetUserPosterRightsParams struct {
	HasPosterRights bool      `json:"has_poster_rights"`
	ID              uuid.UUID `json:"id"`
}

func (q *Queries) SetUserPosterRights(ctx context.Context, arg SetUserPosterRightsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setUserPosterRights, arg.HasPosterRights, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Username,
		&i.Avatar,
		&i.HasFarmingRights,
		&i.HasPosterRights,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
