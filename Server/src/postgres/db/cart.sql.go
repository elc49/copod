// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: cart.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addToCart = `-- name: AddToCart :one
INSERT INTO carts (
  volume, market_id, farm_id, user_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, volume, market_id, farm_id, user_id, created_at, updated_at
`

type AddToCartParams struct {
	Volume   int32     `json:"volume"`
	MarketID uuid.UUID `json:"market_id"`
	FarmID   uuid.UUID `json:"farm_id"`
	UserID   uuid.UUID `json:"user_id"`
}

func (q *Queries) AddToCart(ctx context.Context, arg AddToCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, addToCart,
		arg.Volume,
		arg.MarketID,
		arg.FarmID,
		arg.UserID,
	)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Volume,
		&i.MarketID,
		&i.FarmID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const clearTestCarts = `-- name: ClearTestCarts :exec
DELETE FROM carts
`

func (q *Queries) ClearTestCarts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearTestCarts)
	return err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM carts WHERE market_id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, marketID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCartItem, marketID)
	return err
}

const getCartItem = `-- name: GetCartItem :one
SELECT id, volume, market_id, farm_id, user_id, created_at, updated_at FROM carts
WHERE market_id = $1 AND farm_id = $2 AND user_id = $3
LIMIT 1
`

type GetCartItemParams struct {
	MarketID uuid.UUID `json:"market_id"`
	FarmID   uuid.UUID `json:"farm_id"`
	UserID   uuid.UUID `json:"user_id"`
}

func (q *Queries) GetCartItem(ctx context.Context, arg GetCartItemParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCartItem, arg.MarketID, arg.FarmID, arg.UserID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Volume,
		&i.MarketID,
		&i.FarmID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserCartItems = `-- name: GetUserCartItems :many
SELECT id, volume, market_id, farm_id, user_id, created_at, updated_at FROM carts
WHERE user_id = $1
`

func (q *Queries) GetUserCartItems(ctx context.Context, userID uuid.UUID) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, getUserCartItems, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cart{}
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.Volume,
			&i.MarketID,
			&i.FarmID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartVolume = `-- name: UpdateCartVolume :one
UPDATE carts SET volume = $1
WHERE id = $2
RETURNING id, volume, market_id, farm_id, user_id, created_at, updated_at
`

type UpdateCartVolumeParams struct {
	Volume int32     `json:"volume"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCartVolume(ctx context.Context, arg UpdateCartVolumeParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCartVolume, arg.Volume, arg.ID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Volume,
		&i.MarketID,
		&i.FarmID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
